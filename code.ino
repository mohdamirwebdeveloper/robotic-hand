/*
  ------------------------------------------------------
  Project Title   : ESP8266 OLED screen based Robotic Arm
  Version         : 1.1
  Author          : Mohd Amir
  Contributor     : Sunil Kumar
  Project Type    : Major Project
  ------------------------------------------------------

  Description:
  This project implements an interactive menu system using an ESP8266
  microcontroller with a 0.96" I2C OLED display. It features a smooth
  UI experience with bitmap icons, animated startup screen, and
  navigation using active-low push buttons.

  Designed as a versatile interface console, this system can be easily
  adapted for various applications like motion presets, testing routines,
  and device linking. Clean aesthetics and logical flow ensure both
  usability and expandability for embedded solutions.

  Developed with passion and precision to serve as a solid foundation
  for real-world IoT and embedded menu-driven applications.
*/


#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

#define D2 4 //Bhai D2 ki pin SDA se connect ker.
#define D1 5 //Bhai D1 ki pin SCL se connect ker.
//<--------------------------------------------------buttons-------------------------------------------------->
#define BUTTON_UP     14  // D5
#define BUTTON_DOWN   12  // D6
#define BUTTON_A      13  // D7

#define SCREEN_WIDTH 128 
#define SCREEN_HEIGHT 64
#define OLED_RESET -1
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

// 'Outline-select', 128x21px
const unsigned char epd_bitmap_Outline_select [] PROGMEM = {
	0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 
	0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 
	0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 
	0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 
	0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 
	0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 
	0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 
	0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 
	0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 
	0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 
	0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 
	0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 
	0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 
	0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 
	0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 
	0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 
	0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 
	0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 
	0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 
	0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 
	0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00
};
// 'RoboticHandicon', 16x16px
const unsigned char epd_bitmap_RoboticHandicon [] PROGMEM = {
	0x00, 0x3e, 0x00, 0x41, 0x01, 0x80, 0x03, 0x80, 0x07, 0x41, 0x1e, 0x3e, 0x3c, 0x00, 0x3c, 0x00, 
	0x3e, 0x00, 0x1f, 0x00, 0x03, 0x80, 0x01, 0xc0, 0x00, 0xe0, 0x00, 0x70, 0x07, 0xfe, 0x0f, 0xff
};
// 'TestIcon', 16x16px
const unsigned char epd_bitmap_TestIcon [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x03, 0x00, 0x07, 0x00, 0x0e, 0x00, 0x1c, 0x00, 0x38, 
	0x40, 0x70, 0xe0, 0xe0, 0x71, 0xc0, 0x3b, 0x80, 0x1f, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00
};
// 'Checklink', 16x16px
const unsigned char epd_bitmap_Checklink [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xf0, 0x10, 0x08, 0x20, 0x04, 0x4f, 0xf2, 0x10, 0x08, 
	0x23, 0xc4, 0x04, 0x20, 0x01, 0x80, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

const unsigned char epd_bitmap_About [] PROGMEM = {
	0x00, 0x00, 0x01, 0xc0, 0x01, 0xc0, 0x01, 0xc0, 0x01, 0xc0, 0x01, 0xc0, 0x01, 0xc0, 0x01, 0xc0, 
	0x01, 0xc0, 0x01, 0xc0, 0x00, 0x00, 0x01, 0xc0, 0x01, 0xc0, 0x01, 0xc0, 0x00, 0x00, 0x00, 0x00
};

// Array of all bitmaps for convenience. (Total bytes used to store images in PROGMEM = 496)
const int epd_bitmap_allArray_LEN = 5;
const unsigned char* epd_bitmap_allArray[5] = {
	epd_bitmap_RoboticHandicon,
	epd_bitmap_Checklink,
	epd_bitmap_TestIcon,
  epd_bitmap_About,
  epd_bitmap_Outline_select
};


void startAnimation() {
  display.setTextSize(1.5);             
  display.setTextColor(SSD1306_WHITE);
  display.setCursor((SCREEN_WIDTH - 60) / 2, (SCREEN_HEIGHT + 22) / 2);  // Adjust based on font size
  display.println("Starting...");
  display.display();
  delay(1500);
  display.clearDisplay();
  for (int i = 0; i < 3; i++) {
    display.clearDisplay();
    display.drawBitmap(
      (SCREEN_WIDTH - 16) / 2,  // center 16x16 bitmap
      (SCREEN_HEIGHT - 16) / 2,
      epd_bitmap_allArray[i],
      16, 16,
      SSD1306_WHITE
    );
    display.display();
    delay(1000);
  }

  delay(500);
  display.clearDisplay();
 }

int num_item = 4; //<-----------Also update this variable if the manu_name no items are changed 

char manu_name[4] [20] = {
  {"Preset Motions"},
  {"Link"},
  {"Test"},
  {"About"}
};

int item_selected = 0;
int next_item;  
int prev_item;

void setup() {
  Wire.begin(D2, D1);  
  display.begin(SSD1306_SWITCHCAPVCC, 0x3C);
  display.clearDisplay();
  display.display();
  delay(500);
  startAnimation();

  pinMode(BUTTON_UP, INPUT_PULLUP);
  pinMode(BUTTON_DOWN, INPUT_PULLUP); //Pull Uped by default so you have to connect the Pins to GND in order to activate it 
  pinMode(BUTTON_A, INPUT_PULLUP);
}

void loop() {
  if(digitalRead(BUTTON_UP) == LOW){
    item_selected -= 1;
    if(item_selected < 0 ){
      item_selected = num_item - 1;
    } 
  }
  
  if(digitalRead(BUTTON_DOWN) == LOW){
    item_selected += 1;
    if(item_selected >= num_item){
      item_selected = 0;
    }
  }

  prev_item = item_selected - 1; 
  //preventing overflow of list items 

  if(prev_item <0){
    prev_item = num_item - 1;
  }

  next_item = item_selected +1;
  if(next_item >= num_item){
    next_item = 0;
  }


  display.clearDisplay();

  display.setTextSize(1);             
  display.setTextColor(SSD1306_WHITE);
  display.setCursor(26,8);  
  display.println(manu_name[prev_item]);
  display.setCursor(26,29);  
  display.println(manu_name[item_selected]);
  display.setCursor(26,50);  
  display.println(manu_name[next_item]);

  display.drawBitmap(4,2,epd_bitmap_allArray[prev_item],16,16,SSD1306_WHITE);

  display.drawBitmap(4,24,epd_bitmap_allArray[item_selected],16,16,SSD1306_WHITE);

  display.drawBitmap(4,46,epd_bitmap_allArray[next_item],16,16,SSD1306_WHITE);

  display.drawBitmap(0,22,epd_bitmap_allArray[4],128,21,SSD1306_WHITE);
  display.display();
  delay(500);
}
